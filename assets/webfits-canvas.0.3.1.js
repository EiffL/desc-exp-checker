// Generated by CoffeeScript 1.4.0
// ADW: Comes from https://github.com/astrojs/rawimage.js
(function() {
  var Api, BaseApi, WebFITS, version,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (this.astro == null) {
    this.astro = {};
  }

  WebFITS = {};

  WebFITS.version = '0.3.1';

  this.astro.WebFITS = WebFITS;

  BaseApi = (function() {

    function BaseApi(el, width, height) {
      var canvasStyle, overlayStyle, parentStyle;
      this.el = el;
      this.wheelHandler = __bind(this.wheelHandler, this);

      this._reset();
      this.width = width;
      this.height = height;
      this.canvas = document.createElement('canvas');
      this.canvas.setAttribute('width', this.width);
      this.canvas.setAttribute('height', this.height);
      this.canvas.setAttribute('class', 'visualization');
      this.overlay = document.createElement('canvas');
      this.overlay.setAttribute('width', this.width);
      this.overlay.setAttribute('height', this.height);
      this.overlay.setAttribute('class', 'overlay');
      this.overlayCtx = this.overlay.getContext('2d');
      this.report = document.createElement('canvas');
      this.report.setAttribute('width', this.width);
      this.report.setAttribute('height', this.height);
      this.report.setAttribute('class', 'report');
      this.reportCtx = this.report.getContext('2d');
      this.el.appendChild(this.canvas);
      this.el.appendChild(this.overlay);
      this.el.appendChild(this.report);
      this.nImages = 0;
	this.rescaling = 1.;	
      if (!this.getContext()) {
        return null;
      }
      this.offsetLeft = this.canvas.offsetLeft;
      this.offsetTop = this.canvas.offsetTop;
      //ADW: Don't show mask by default
      //this.showMask = true;
      this.showMask = false;
      parentStyle = this.canvas.parentElement.style;
      parentStyle.width = "" + this.canvas.width + "px";
      parentStyle.height = "" + this.canvas.height + "px";
      parentStyle.overflow = 'hidden';
      parentStyle.backgroundColor = '#252525';
      parentStyle.position = 'relative';
      canvasStyle = this.canvas.style;
      overlayStyle = this.overlay.style;
      reportStyle = this.report.style;
      canvasStyle.position = 'absolute';
      overlayStyle.position = 'absolute';
      reportStyle.position = 'absolute';
      overlayStyle.pointerEvents = 'none';
      reportStyle.pointerEvents = 'none';
    }

    BaseApi.prototype.setupControls = function(callbacks, opts) {
      var _onmousedown, _onmousemove, _onmouseout, _onmouseover, _onmouseup,
        _this = this;
      if (callbacks == null) {
        callbacks = null;
      }
      if (opts == null) {
        opts = null;
      }
      
      if ((callbacks != null ? callbacks.onclick : void 0) != null) {
        this.canvas.onclick = function(e) {
          return callbacks.onclick.call(_this, _this, opts, e);
        };
      }
    };
    
    return BaseApi;

  })();

  this.astro.WebFITS.BaseApi = BaseApi;

  BaseApi = this.astro.WebFITS.BaseApi;

  Api = (function(_super) {

    __extends(Api, _super);

    function Api() {
      return Api.__super__.constructor.apply(this, arguments);
    }

    Api.prototype._reset = function() {
      this.images = {};
      this.scales = {};
      return this.calibrations = {};
    };

    Api.prototype._applyTransforms = function() {
      var transforms;
      transforms = ["scaleX(" + this.zoom + ")", "scaleY(" + (this.zoom) + ")", "translateX(" + this.xOffset + "px)", "translateY(" + this.yOffset + "px)"].join(' ');
      this.canvas.style.transform = transforms;
      this.canvas.style.webkitTransform = transforms;
      return this.canvas.style.MozTransform = transforms;
    };

    Api.prototype.getContext = function() {
      this.ctx = this.canvas.getContext('2d');
      this.draw = this.drawPeter;
      return this.ctx;
    };

    Api.prototype.setupControls = function() {
      var _this = this;
      Api.__super__.setupControls.apply(this, arguments);
    };

    Api.prototype.loadImage = function(identifier, arr, width, height) {
      // document.write("loadImage"+",");
      // document.write("width = "+width+",");
      // document.write("height = "+height+",");
      // document.write("arr.length = "+arr.length+",");
      // document.write("identifier = "+identifier+",");
      this.images[identifier] = {
        arr: new Float32Array(arr),
        width: width,
        height: height
      };
      if (!this.currentImage) {
        this.setImage(identifier);
      } 
      return this.nImages += 1;
    };

    Api.prototype.setImage = function(identifier) {
      return this.currentImage = identifier;
    };

    Api.prototype.setStretch = function(stretch) {
      switch (stretch) {
        case 'arcsinh':
          this.draw = this.drawAsinh;
          break;
        case 'peter':
          this.draw = this.drawPeter;
          break;
        default:
          this.draw = this.drawPeter;
      }
      return this.draw();
    };

    Api.prototype.setExtent = function(min, max) {
      this.minimum = min;
      this.maximum = max;
      return this.draw();
    };

    Api.prototype.setRescaling = function(value) {
      this.rescaling = value;
      return this.draw();	
    };
      
    Api.prototype.setScales = function(r, g, b) {
      // document.write("setScales,");
      this.scales.r = r;
      this.scales.g = g;
      this.scales.b = b;
      return this.draw();
    };

    Api.prototype.setCalibrations = function(r, g, b) {
      this.calibrations.r = r;
      this.calibrations.g = g;
      this.calibrations.b = b;
      return this.draw();
    };

    Api.prototype.setAlpha = function(value) {
      this.alpha = value;
      return this.draw();
    };

    Api.prototype.setQ = function(value) {
      this.Q = value;
      return this.draw();
    };

    // color all masked pixels blue
    Api.prototype.addMask = function(arr) {
      // document.write("addMask,");
      var data = this.images.bpm.arr;
      var length = arr.length;
      var value;
      while (length -= 4) {
        value = data[length / 4];
          if (value % 32768 != 0) { // issue with fits.js, compression and Uint16
          arr[length + 0] = 0;
          arr[length + 1] = 0;
          arr[length+2] = 255;
        }
      }
    };

    Api.prototype.median = function(arr) {
        var total = 0, i;
        var data = arr.slice();
        var median = 0, numsLen = arr.length;
        data.sort();
        med = data[numsLen/2]
        for (i = 0; i < arr.length; i += 1){
          arr[i] -= med
        }
    };

    Api.prototype.drawAsinh = function(minval) {
      // document.write("drawAsinh,");
      var arr, data, height, imgData, length, max, min, pixel, range, value, width;
      data = this.images[this.currentImage].arr;
      this.median(data);
      width = this.images[this.currentImage].width;
      height = this.images[this.currentImage].height;
      imgData = this.ctx.getImageData(0, 0, width, height);
      arr = imgData.data;
      if (minval === undefined)
        min = this.scaledArcsinh(this.minimum);
      else
        min = this.scaledArcsinh(minval);
      max = this.scaledArcsinh(this.maximum);
      range = max - min;
      length = arr.length;
      while (length -= 4) {
        pixel = this.scaledArcsinh(data[length / 4] / this.rescaling);
        value = 255 * (pixel - min) / range;
        arr[length + 0] = value;
        arr[length + 1] = value;
        arr[length + 2] = value;
        arr[length + 3] = 255;
      }
      if (this.showMask && this.nImages % 2 == 0)
        this.addMask(arr);
      imgData.data = arr;
      //this.ctx.scale(1,-1);
      //this.ctx.translate(0, height);
      this.ctx.putImageData(imgData, 0, 0);
      return this._applyTransforms();
    };
    
    Api.prototype.drawPeter = function() {
      return this.drawAsinh(1);
    };
    
    Api.prototype.teardown = function() {
      // document.write("teardown,");
      this.el.removeChild(this.canvas);
      this.ctx = void 0;
      return this._reset();
    };

    Api.prototype.arcsinh = function(value) {
      return Math.log(value + Math.sqrt(1 + value * value));
    };

    Api.prototype.scaledArcsinh = function(value) {
      return this.arcsinh(value / -0.033) / this.arcsinh(1.0 / -0.033);
    };

    return Api;

  })(BaseApi);

  version = this.astro.WebFITS.version;

  this.astro.WebFITS = Api;

  this.astro.WebFITS.version = version;

}).call(this);
